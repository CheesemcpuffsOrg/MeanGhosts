//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSystem/ControlScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlScheme : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlScheme"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""259b3c1a-90f4-4906-a517-ec6d45a73a18"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e7395eef-b590-433e-942b-a88aead6c56d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""4a866d2e-d146-4460-b87c-1ef6b94e77f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveMouse"",
                    ""type"": ""Value"",
                    ""id"": ""e24fb6e8-de09-4a8f-bde3-e59533748e38"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""d577c428-0c43-4971-af60-3e730b008653"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BeamControl"",
                    ""type"": ""Button"",
                    ""id"": ""97fdc2dd-ed01-431f-8af8-a99290546470"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""565e17ac-5d65-469b-9ab8-77d34fa20ec7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""645263b2-f777-4225-adb4-0a178d4b60cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e913c695-05dd-4dd4-95f8-d6115e294ea7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""06ea279b-1d7d-4539-a84e-c3c1d56f4751"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""ede5efbf-003f-47fb-a922-8afb19a669dd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bfd1249a-f5a7-4e74-8a9a-ccfb6fb0b4f2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""9ba8f636-0b03-49da-a0ca-4afffa2cbbe7"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""3e23049d-2f79-4db4-b025-b2253ce4d5bb"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""b01422d0-6dfd-4b82-8692-2d52cc7661b1"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""8ef85cd2-97bd-4e16-bb16-b887f4e2089c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""36e7c6e2-1857-4ad2-b4d4-19e7beb67431"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed6aff8e-c611-4c57-a71b-907040d4cef9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d37988e-a5a6-4a56-9340-d869103061a2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ddb5a86-35e3-4a4c-899b-c46d666f5b4e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccfec76b-780c-41dc-b2b1-d540f9548006"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f1d7939-33cd-4fe4-9da5-aebea79d9c7a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""BeamControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""c6bff7d5-86a0-43b6-aa1e-4d7f25fc43c9"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""66b1fc7b-ee9c-4b15-a543-5d8ae498314e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6e3bd7d-b408-45fc-ab55-abf6856d3f0a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""K&B"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6353f2b-6456-4ec8-9652-67fe28971fed"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SoundDesignTesting"",
            ""id"": ""d9241766-d205-44ac-8ee7-88b892de1413"",
            ""actions"": [
                {
                    ""name"": ""one"",
                    ""type"": ""Button"",
                    ""id"": ""10b0ab72-619b-463e-9974-939da0bc5da3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""two"",
                    ""type"": ""Button"",
                    ""id"": ""fd05eb90-3d9b-4da2-a922-e3e3455718dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""three"",
                    ""type"": ""Button"",
                    ""id"": ""c8115b5d-8e54-4ab6-8584-0924c72da903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""four"",
                    ""type"": ""Button"",
                    ""id"": ""ebceb9b3-6e28-49fe-95e3-02eddd5fd8af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""five"",
                    ""type"": ""Button"",
                    ""id"": ""7031ff65-57dc-4db8-9185-f507864e3294"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""six"",
                    ""type"": ""Button"",
                    ""id"": ""b9387166-bdf2-4b05-a208-dc6eb8965066"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""seven"",
                    ""type"": ""Button"",
                    ""id"": ""390306f3-53eb-4291-83d2-0122a5d051f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""eight"",
                    ""type"": ""Button"",
                    ""id"": ""a832955f-9084-4746-9c41-56d8ee84b88c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""nine"",
                    ""type"": ""Button"",
                    ""id"": ""34cc3058-336c-4502-9dc4-08a94e91f814"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""zero"",
                    ""type"": ""Button"",
                    ""id"": ""0c527985-aa65-4ee1-bd17-7f501e7287e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shift"",
                    ""type"": ""Button"",
                    ""id"": ""4c1997b5-98e3-46f9-928a-30dc61d20784"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cde38a82-9fe1-496e-9fef-999bf4269223"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""one"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3969eae8-dfe3-4143-8da6-4076d8afb307"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""two"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32e36440-3462-4b51-b925-d57798e0e3d7"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""three"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8c6d502-c2f7-4e99-b0e7-64d5161d1c31"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""four"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""564041d3-d1d3-4c26-b7b3-2ff6357d861c"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""five"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad94591-f193-4e57-860f-0b59e583d316"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""six"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f55c2081-17c6-4f41-a72e-13195ba5ddd9"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""seven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52c69316-6b11-4cb5-abd6-cd809e64b598"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""eight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9518cea6-bdf1-4cba-a807-5ac420d996c2"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""nine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19d74def-7a47-4895-bd5c-64e40ee0ab91"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zero"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2337c665-975f-4aeb-8398-f41c13abbd7b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K&B"",
            ""bindingGroup"": ""K&B"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Flashlight = m_Player.FindAction("Flashlight", throwIfNotFound: true);
        m_Player_MoveMouse = m_Player.FindAction("MoveMouse", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_BeamControl = m_Player.FindAction("BeamControl", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
        // SoundDesignTesting
        m_SoundDesignTesting = asset.FindActionMap("SoundDesignTesting", throwIfNotFound: true);
        m_SoundDesignTesting_one = m_SoundDesignTesting.FindAction("one", throwIfNotFound: true);
        m_SoundDesignTesting_two = m_SoundDesignTesting.FindAction("two", throwIfNotFound: true);
        m_SoundDesignTesting_three = m_SoundDesignTesting.FindAction("three", throwIfNotFound: true);
        m_SoundDesignTesting_four = m_SoundDesignTesting.FindAction("four", throwIfNotFound: true);
        m_SoundDesignTesting_five = m_SoundDesignTesting.FindAction("five", throwIfNotFound: true);
        m_SoundDesignTesting_six = m_SoundDesignTesting.FindAction("six", throwIfNotFound: true);
        m_SoundDesignTesting_seven = m_SoundDesignTesting.FindAction("seven", throwIfNotFound: true);
        m_SoundDesignTesting_eight = m_SoundDesignTesting.FindAction("eight", throwIfNotFound: true);
        m_SoundDesignTesting_nine = m_SoundDesignTesting.FindAction("nine", throwIfNotFound: true);
        m_SoundDesignTesting_zero = m_SoundDesignTesting.FindAction("zero", throwIfNotFound: true);
        m_SoundDesignTesting_shift = m_SoundDesignTesting.FindAction("shift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Flashlight;
    private readonly InputAction m_Player_MoveMouse;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_BeamControl;
    public struct PlayerActions
    {
        private @ControlScheme m_Wrapper;
        public PlayerActions(@ControlScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Flashlight => m_Wrapper.m_Player_Flashlight;
        public InputAction @MoveMouse => m_Wrapper.m_Player_MoveMouse;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @BeamControl => m_Wrapper.m_Player_BeamControl;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Flashlight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlashlight;
                @Flashlight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlashlight;
                @Flashlight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlashlight;
                @MoveMouse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveMouse;
                @MoveMouse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveMouse;
                @MoveMouse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveMouse;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @BeamControl.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBeamControl;
                @BeamControl.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBeamControl;
                @BeamControl.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBeamControl;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Flashlight.started += instance.OnFlashlight;
                @Flashlight.performed += instance.OnFlashlight;
                @Flashlight.canceled += instance.OnFlashlight;
                @MoveMouse.started += instance.OnMoveMouse;
                @MoveMouse.performed += instance.OnMoveMouse;
                @MoveMouse.canceled += instance.OnMoveMouse;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @BeamControl.started += instance.OnBeamControl;
                @BeamControl.performed += instance.OnBeamControl;
                @BeamControl.canceled += instance.OnBeamControl;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private IPauseActions m_PauseActionsCallbackInterface;
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @ControlScheme m_Wrapper;
        public PauseActions(@ControlScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void SetCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PauseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // SoundDesignTesting
    private readonly InputActionMap m_SoundDesignTesting;
    private ISoundDesignTestingActions m_SoundDesignTestingActionsCallbackInterface;
    private readonly InputAction m_SoundDesignTesting_one;
    private readonly InputAction m_SoundDesignTesting_two;
    private readonly InputAction m_SoundDesignTesting_three;
    private readonly InputAction m_SoundDesignTesting_four;
    private readonly InputAction m_SoundDesignTesting_five;
    private readonly InputAction m_SoundDesignTesting_six;
    private readonly InputAction m_SoundDesignTesting_seven;
    private readonly InputAction m_SoundDesignTesting_eight;
    private readonly InputAction m_SoundDesignTesting_nine;
    private readonly InputAction m_SoundDesignTesting_zero;
    private readonly InputAction m_SoundDesignTesting_shift;
    public struct SoundDesignTestingActions
    {
        private @ControlScheme m_Wrapper;
        public SoundDesignTestingActions(@ControlScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @one => m_Wrapper.m_SoundDesignTesting_one;
        public InputAction @two => m_Wrapper.m_SoundDesignTesting_two;
        public InputAction @three => m_Wrapper.m_SoundDesignTesting_three;
        public InputAction @four => m_Wrapper.m_SoundDesignTesting_four;
        public InputAction @five => m_Wrapper.m_SoundDesignTesting_five;
        public InputAction @six => m_Wrapper.m_SoundDesignTesting_six;
        public InputAction @seven => m_Wrapper.m_SoundDesignTesting_seven;
        public InputAction @eight => m_Wrapper.m_SoundDesignTesting_eight;
        public InputAction @nine => m_Wrapper.m_SoundDesignTesting_nine;
        public InputAction @zero => m_Wrapper.m_SoundDesignTesting_zero;
        public InputAction @shift => m_Wrapper.m_SoundDesignTesting_shift;
        public InputActionMap Get() { return m_Wrapper.m_SoundDesignTesting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SoundDesignTestingActions set) { return set.Get(); }
        public void SetCallbacks(ISoundDesignTestingActions instance)
        {
            if (m_Wrapper.m_SoundDesignTestingActionsCallbackInterface != null)
            {
                @one.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnOne;
                @one.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnOne;
                @one.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnOne;
                @two.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnTwo;
                @two.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnTwo;
                @two.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnTwo;
                @three.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnThree;
                @three.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnThree;
                @three.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnThree;
                @four.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnFour;
                @four.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnFour;
                @four.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnFour;
                @five.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnFive;
                @five.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnFive;
                @five.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnFive;
                @six.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnSix;
                @six.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnSix;
                @six.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnSix;
                @seven.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnSeven;
                @seven.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnSeven;
                @seven.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnSeven;
                @eight.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnEight;
                @eight.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnEight;
                @eight.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnEight;
                @nine.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnNine;
                @nine.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnNine;
                @nine.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnNine;
                @zero.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnZero;
                @zero.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnZero;
                @zero.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnZero;
                @shift.started -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnShift;
                @shift.performed -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnShift;
                @shift.canceled -= m_Wrapper.m_SoundDesignTestingActionsCallbackInterface.OnShift;
            }
            m_Wrapper.m_SoundDesignTestingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @one.started += instance.OnOne;
                @one.performed += instance.OnOne;
                @one.canceled += instance.OnOne;
                @two.started += instance.OnTwo;
                @two.performed += instance.OnTwo;
                @two.canceled += instance.OnTwo;
                @three.started += instance.OnThree;
                @three.performed += instance.OnThree;
                @three.canceled += instance.OnThree;
                @four.started += instance.OnFour;
                @four.performed += instance.OnFour;
                @four.canceled += instance.OnFour;
                @five.started += instance.OnFive;
                @five.performed += instance.OnFive;
                @five.canceled += instance.OnFive;
                @six.started += instance.OnSix;
                @six.performed += instance.OnSix;
                @six.canceled += instance.OnSix;
                @seven.started += instance.OnSeven;
                @seven.performed += instance.OnSeven;
                @seven.canceled += instance.OnSeven;
                @eight.started += instance.OnEight;
                @eight.performed += instance.OnEight;
                @eight.canceled += instance.OnEight;
                @nine.started += instance.OnNine;
                @nine.performed += instance.OnNine;
                @nine.canceled += instance.OnNine;
                @zero.started += instance.OnZero;
                @zero.performed += instance.OnZero;
                @zero.canceled += instance.OnZero;
                @shift.started += instance.OnShift;
                @shift.performed += instance.OnShift;
                @shift.canceled += instance.OnShift;
            }
        }
    }
    public SoundDesignTestingActions @SoundDesignTesting => new SoundDesignTestingActions(this);
    private int m_KBSchemeIndex = -1;
    public InputControlScheme KBScheme
    {
        get
        {
            if (m_KBSchemeIndex == -1) m_KBSchemeIndex = asset.FindControlSchemeIndex("K&B");
            return asset.controlSchemes[m_KBSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFlashlight(InputAction.CallbackContext context);
        void OnMoveMouse(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnBeamControl(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ISoundDesignTestingActions
    {
        void OnOne(InputAction.CallbackContext context);
        void OnTwo(InputAction.CallbackContext context);
        void OnThree(InputAction.CallbackContext context);
        void OnFour(InputAction.CallbackContext context);
        void OnFive(InputAction.CallbackContext context);
        void OnSix(InputAction.CallbackContext context);
        void OnSeven(InputAction.CallbackContext context);
        void OnEight(InputAction.CallbackContext context);
        void OnNine(InputAction.CallbackContext context);
        void OnZero(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
    }
}
